// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Otus.Project.Orm.Configuration;

namespace Otus.Project.Orm.Migrations
{
    [DbContext(typeof(StorageContext))]
    [Migration("20220319170911_AddStockAndDeliverySlotTables")]
    partial class AddStockAndDeliverySlotTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Otus.Project.Domain.Model.BillingAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("BillingAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0796f40a-9e24-46ea-a7a5-ea445d2d4ac1"),
                            Balance = 102m,
                            CreatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("0796f40a-9e24-46ea-a7a5-ea445d2d4ae1")
                        },
                        new
                        {
                            Id = new Guid("0796f40a-9e24-46ea-a7a5-ea445d2d4ac2"),
                            Balance = 1020m,
                            CreatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("0796f40a-9e24-46ea-a7a5-ea445d2d4ae2")
                        },
                        new
                        {
                            Id = new Guid("0796f40a-9e24-46ea-a7a5-ea445d2d4ac3"),
                            Balance = 534m,
                            CreatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("0796f40a-9e24-46ea-a7a5-ea445d2d4ae3")
                        });
                });

            modelBuilder.Entity("Otus.Project.Domain.Model.DeliverySlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Courier")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("From")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("To")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("DeliverySlots");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0796f40a-9e24-46ea-a7a5-ea445d2dbbb1"),
                            Courier = "Boris Razor",
                            CreatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            From = new DateTime(2022, 1, 1, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            To = new DateTime(2022, 1, 1, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("0796f40a-9e24-46ea-a7a5-ea445d2dbbb2"),
                            Courier = "Ivan Grozny",
                            CreatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            From = new DateTime(2022, 1, 1, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            To = new DateTime(2022, 1, 1, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("0796f40a-9e24-46ea-a7a5-ea445d2dbbb3"),
                            Courier = "John Wick",
                            CreatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            From = new DateTime(2022, 1, 1, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            To = new DateTime(2022, 1, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Otus.Project.Domain.Model.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EventType")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("RecipientEmail")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Otus.Project.Domain.Model.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<int>("OrderState")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Otus.Project.Domain.Model.OrderProducts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("Otus.Project.Domain.Model.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0796f40a-9e24-46ea-a7a5-ea445d2d4ac1"),
                            Cost = 55m,
                            CreatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Product #1",
                            UpdatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("0796f40a-9e24-46ea-a7a5-ea445d2d4ac2"),
                            Cost = 1000m,
                            CreatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Product #2",
                            UpdatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("0796f40a-9e24-46ea-a7a5-ea445d2d4ac3"),
                            Cost = 135m,
                            CreatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Product #3",
                            UpdatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Otus.Project.Domain.Model.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0796f40a-9e24-46ea-a7a5-ea445d2dbbb1"),
                            Amount = 50,
                            CreatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ProductId = new Guid("0796f40a-9e24-46ea-a7a5-ea445d2d4ac1"),
                            UpdatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("0796f40a-9e24-46ea-a7a5-ea445d2dbbb2"),
                            Amount = 75,
                            CreatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ProductId = new Guid("0796f40a-9e24-46ea-a7a5-ea445d2d4ac2"),
                            UpdatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("0796f40a-9e24-46ea-a7a5-ea445d2dbbb3"),
                            Amount = 90,
                            CreatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ProductId = new Guid("0796f40a-9e24-46ea-a7a5-ea445d2d4ac3"),
                            UpdatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Otus.Project.Domain.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CellPhone")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsEmailNotificationEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0796f40a-9e24-46ea-a7a5-ea445d2d4ae1"),
                            CellPhone = "1111-111-111",
                            CreatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "john.dow.1@example.com",
                            FirstName = "John",
                            IsEmailNotificationEnabled = true,
                            LastName = "Dow",
                            MiddleName = "1st",
                            Password = "some_pass_1",
                            UpdatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("0796f40a-9e24-46ea-a7a5-ea445d2d4ae2"),
                            CellPhone = "1111-222-222",
                            CreatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "john.dow.2@example.com",
                            FirstName = "John",
                            IsEmailNotificationEnabled = true,
                            LastName = "Dow",
                            MiddleName = "2nd",
                            Password = "some_pass_2",
                            UpdatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("0796f40a-9e24-46ea-a7a5-ea445d2d4ae3"),
                            CellPhone = "1111-333-333",
                            CreatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "john.dow.3@example.com",
                            FirstName = "John",
                            IsEmailNotificationEnabled = true,
                            LastName = "Dow",
                            MiddleName = "3rd",
                            Password = "some_pass_3",
                            UpdatedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Otus.Project.Domain.Model.BillingAccount", b =>
                {
                    b.HasOne("Otus.Project.Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Otus.Project.Domain.Model.DeliverySlot", b =>
                {
                    b.HasOne("Otus.Project.Domain.Model.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Otus.Project.Domain.Model.Notification", b =>
                {
                    b.HasOne("Otus.Project.Domain.Model.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Otus.Project.Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Otus.Project.Domain.Model.Order", b =>
                {
                    b.HasOne("Otus.Project.Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Otus.Project.Domain.Model.OrderProducts", b =>
                {
                    b.HasOne("Otus.Project.Domain.Model.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Otus.Project.Domain.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Otus.Project.Domain.Model.Stock", b =>
                {
                    b.HasOne("Otus.Project.Domain.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Otus.Project.Domain.Model.Order", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
