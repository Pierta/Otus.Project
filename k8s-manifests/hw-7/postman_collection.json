{
	"info": {
		"_postman_id": "3290162e-5ec7-4f83-af0a-3e70ecbaa090",
		"name": "Otus.Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "hw-7 test (create an order idempotently)",
			"item": [
				{
					"name": "Generate random variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonObj = JSON.parse(responseBody)\r",
									"pm.collectionVariables.set(\"email\", jsonObj.data.email)\r",
									"pm.collectionVariables.set(\"password\", jsonObj.data.password)\r",
									"pm.collectionVariables.set(\"idempotencyKey\", jsonObj.data.idempotencyKey)\r",
									"\r",
									"console.log('Response:', jsonObj.data)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{$guid}}@{{$randomColor}}.com\",\r\n    \"password\": \"{{$guid}}\",\r\n    \"idempotencyKey\": \"{{$guid}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonObj = JSON.parse(responseBody)\r",
									"pm.collectionVariables.set(\"user_id\", jsonObj.id)\r",
									"\r",
									"console.log('Request:', pm.request.body.raw)\r",
									"console.log('Response:', jsonObj.id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"some\",\r\n    \"lastName\": \"new\",\r\n    \"middleName\": \"user\",\r\n    \"cellPhone\": \"222-222-3333\",\r\n    \"isEmailNotificationEnabled\": true    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/register/billing",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"register",
								"billing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login as the new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successful with a status code of 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonObj = JSON.parse(responseBody)\r",
									"pm.collectionVariables.set(\"token\", jsonObj.token)\r",
									"\r",
									"console.log('Request:', pm.request.body.raw)\r",
									"console.log('Response:', jsonObj.token)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Top up your balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successful with a status code of 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that it returns '100'\", function () {\r",
									"  pm.expect(pm.response.text()).contains(\"100\");\r",
									"});\r",
									"\r",
									"console.log('Response:', responseBody)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/billing/topUp/100",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"billing",
								"topUp",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successful with a status code of 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that the order is paid\", function () {\r",
									"  var jsonData = pm.response.json();\r",
									"  pm.expect(jsonData.isPaid).equals(true);\r",
									"  pm.expect(jsonData.id).equals(pm.collectionVariables.get(\"idempotencyKey\"));\r",
									"});\r",
									"\r",
									"console.log('Request:', pm.request.body.raw)\r",
									"console.log('Headers:', pm.request.headers)\r",
									"console.log('Response:', responseBody)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Idempotency-Key",
								"value": "{{idempotencyKey}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"products\": [\r\n    \"0796f40a-9e24-46ea-a7a5-ea445d2d4ac1\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders/idempotent",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								"idempotent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Current Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successful with a status code of 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that it returns '45'\", function () {\r",
									"  pm.expect(pm.response.json()).equals(45);\r",
									"});\r",
									"\r",
									"console.log('Response:', responseBody)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/billing",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"billing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successful with a status code of 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that we have exactly 1 order\", function () {\r",
									"  var jsonData = pm.response.json();\r",
									"  pm.expect(jsonData.length).equals(1);\r",
									"  pm.expect(jsonData[0].isPaid).equals(true);\r",
									"});\r",
									"\r",
									"console.log('Response:', responseBody)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new order again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successful with a status code of 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that the order is the same\", function () {\r",
									"  var jsonData = pm.response.json();\r",
									"  pm.expect(jsonData.id).equals(pm.collectionVariables.get(\"idempotencyKey\"));\r",
									"});\r",
									"\r",
									"console.log('Request:', pm.request.body.raw)\r",
									"console.log('Headers:', pm.request.headers)\r",
									"console.log('Response:', responseBody)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Idempotency-Key",
								"value": "{{idempotencyKey}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"products\": [\r\n    \"0796f40a-9e24-46ea-a7a5-ea445d2d4ac1\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders/idempotent",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								"idempotent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Current Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successful with a status code of 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that it still returns '45'\", function () {\r",
									"  pm.expect(pm.response.json()).equals(45);\r",
									"});\r",
									"\r",
									"console.log('Response:', responseBody)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/billing",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"billing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successful with a status code of 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that we still have exactly 1 order\", function () {\r",
									"  var jsonData = pm.response.json();\r",
									"  pm.expect(jsonData.length).equals(1);\r",
									"  pm.expect(jsonData[0].isPaid).equals(true);\r",
									"});\r",
									"\r",
									"console.log('Response:', responseBody)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new order with another product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is incorrect with a status code of 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check idempotency key is duplicated\", function () {\r",
									"  pm.expect(pm.response.text()).contains(\"is duplicated\");\r",
									"});\r",
									"\r",
									"console.log('Request:', pm.request.body.raw)\r",
									"console.log('Headers:', pm.request.headers)\r",
									"console.log('Response:', responseBody)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Idempotency-Key",
								"value": "{{idempotencyKey}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"products\": [\r\n    \"0796f40a-9e24-46ea-a7a5-ea445d2d4ac3\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders/idempotent",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								"idempotent"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://arch.homework"
		},
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "email",
			"value": "some@example.com"
		},
		{
			"key": "password",
			"value": "123"
		},
		{
			"key": "new_firstName",
			"value": "another"
		},
		{
			"key": "email2",
			"value": "some2@example.com"
		},
		{
			"key": "password2",
			"value": "321"
		},
		{
			"key": "idempotencyKey",
			"value": "",
			"type": "default"
		}
	]
}